---
# ==============================================================================
# Play 1: Initialize the Kubernetes Control Plane on the First Master (k8s-master1)
# ==============================================================================
- name: 1. INITIALIZE KUBERNETES AND DEPLOY CNI ON FIRST MASTER
  hosts: k8s-master1
  become: true

  tasks:
    - name: Ensure sysctl for bridge networking is set (required for K8s)
      sysctl:
        name: net.bridge.bridge-nf-call-iptables
        value: 1
        state: present
        reload: yes

    - name: Ensure /etc/containerd exists (just in case)
      file:
        path: /etc/containerd
        state: directory
        mode: "0755"

    - name: Create kubeadm config file (ClusterConfiguration + InitConfiguration)
      copy:
        dest: "{{ kubeadm_config_path }}"
        content: |
          apiVersion: kubeadm.k8s.io/v1beta4
          kind: InitConfiguration
          localAPIEndpoint:
            advertiseAddress: "{{ hostvars[inventory_hostname].ansible_host }}"
            bindPort: 6443
          nodeRegistration:
            name: "{{ inventory_hostname }}"
            criSocket: unix:///run/containerd/containerd.sock
          ---
          apiVersion: kubeadm.k8s.io/v1beta4
          kind: ClusterConfiguration
          kubernetesVersion: "v{{ kubernetes_version }}"
          controlPlaneEndpoint: "{{ control_plane_endpoint }}"
          networking:
            podSubnet: "{{ pod_network_cidr }}"
            serviceSubnet: "{{ service_cidr }}"
            dnsDomain: "{{ dns_domain }}"

    - name: Run kubeadm init (first master)
      # This command initializes the cluster and creates /etc/kubernetes/admin.conf.
      command: kubeadm init --control-plane-endpoint="{{ control_plane_endpoint }}" --upload-certs --apiserver-advertise-address={{ ansible_host }} --pod-network-cidr={{ pod_network_cidr }}
      register: kubeadm_init
      ignore_errors: false

    - name: Save kubeadm init output to a file
      # Save the output, including the join token, for later use and debugging.
      copy:
        dest: /var/log/kubeadm-init.log
        content: "{{ kubeadm_init.stdout }}
          {{ kubeadm_init.stderr }}"
        owner: root
        group: root
        mode: "0644"

    # ----------------------------------------------------------------------
    # CONSOLIDATED AND CORRECTED KUBECTL ACCESS FOR 'getfee' USER
    # The original redundant tasks have been replaced by this clean, conditional block.
    # ----------------------------------------------------------------------
    - name: Ensure kube config dir for getfee exists
      # Create the required ~/.kube directory with correct ownership.
      file:
        path: /home/getfee/.kube
        state: directory
        owner: getfee
        group: getfee
        mode: '0755'

    - name: Check if admin.conf exists
      # Stat is used to check for the file's existence before attempting to copy.
      stat:
        path: /etc/kubernetes/admin.conf
      register: admin_conf_stat

    - name: Copy admin.conf to getfee kube config (conditional)
      # Copy the configuration and set correct ownership/permissions for the user 'getfee'.
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/getfee/.kube/config
        remote_src: yes
        owner: getfee
        group: getfee
        mode: '0644'
      # Only copy if the stat check confirms the file exists (i.e., kubeadm init succeeded).
      when: admin_conf_stat.stat.exists
    # ----------------------------------------------------------------------